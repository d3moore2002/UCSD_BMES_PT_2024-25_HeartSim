// -----------------------------------------------
// Arduino 2: Motor + Servo Control Board
// -----------------------------------------------
#include <Servo.h>

// Turn code on or off
const int buttonPin = 4;
// Controls BPM
const int BPMPin = 3;

//stepPin is PulsePin
const int stepPin = 5;
const int dirPin = 2;
const int enPin = 8;

unsigned long lastMotorStepMicros = 0;
const int motorStepsPerCycle = 400;
int motorStepCount = 0;

Servo mitralValve;
Servo aorticValve;
const int mitralOpenAngle = 10;
const int mitralClosedAngle = 25;
const int aorticOpenAngle = 10;
const int aorticClosedAngle = 25;

unsigned long cycleStartTime = 0;

void setup() {
  pinMode(buttonPin, INPUT_PULLUP);
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enPin, OUTPUT);
  pinMode(BPMPin, INPUT_PULLUP);
  digitalWrite(enPin, LOW);
  digitalWrite(dirPin, HIGH);
  mitralValve.attach(9);
  aorticValve.attach(10);
  mitralValve.write(mitralOpenAngle);
  aorticValve.write(aorticClosedAngle);
  cycleStartTime = millis();
  lastMotorStepMicros = micros();
}

void loop() {

  if (BPMPin == LOW && buttonPin == HIGH) { //LOW means 100 BPM
    int cycleLength = 600;
  } else if (buttonPin == HIGH) {
    int cycleLength = 857;
  }

  unsigned long stepIntervalMicros = (cycleLength * 1000UL) / motorStepsPerCycle;
  int mitralCloseTime = ((int) round(492/857)) * cycleLength;
  int aorticOpenTime = ((int) round(551/857)) * cycleLength;
  int aorticCloseTime = ((int) round(807/857)) * cycleLength;
  int mitralOpenTime = cycleLength;
  
  if (buttonPin == LOW) {
    unsigned long currentMillis = millis();
    unsigned long cycleTime = (currentMillis - cycleStartTime) % cycleLength;
    unsigned long nowMicros = micros();
    if (motorStepCount < motorStepsPerCycle && (nowMicros - lastMotorStepMicros >= stepIntervalMicros)) {
      digitalWrite(stepPin, HIGH);
      delayMicroseconds(10);
      digitalWrite(stepPin, LOW);
      lastMotorStepMicros = nowMicros;
      motorStepCount++;
    }
  
    if (cycleTime < mitralCloseTime) {
      mitralValve.write(mitralOpenAngle);
    } else if (cycleTime < aorticOpenTime) {
      mitralValve.write(mitralClosedAngle);
    } else if (cycleTime >= mitralOpenTime) {
      mitralValve.write(mitralOpenAngle);
    }
  
    if (cycleTime < aorticOpenTime) {
      aorticValve.write(aorticClosedAngle);
    } else if (cycleTime < aorticCloseTime) {
      aorticValve.write(aorticOpenAngle);
    } else {
      aorticValve.write(aorticClosedAngle);
    }
  
    if (currentMillis - cycleStartTime >= cycleLength) {
      cycleStartTime = currentMillis;
      motorStepCount = 0;
    }
  }
}
