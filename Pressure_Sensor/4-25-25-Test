/* CONNECT ON RST END OF MUX
  Project: Pressure and Flow Monitoring with Motor Control
  Board: SparkFun Qwiic RedBoard
  Devices:
    - 3x SparkFun MicroPressure Sensors (via Qwiic Mux)
    - YF-S201 Flow Sensor
    - NEMA23 Motor with Microstep Driver

  Functionality:
    - Reads pressure from three sensors via I2C multiplexer
    - Measures flow rate in mL/sec using pulse timing from flow sensor
    - Drives a NEMA23 motor forward and backward using digital pulse signals
*/

#include <Wire.h>
#include <SparkFun_I2C_Mux_Arduino_Library.h> // Library to communicate with Qwiic Mux
#include <SparkFun_MicroPressure.h>          // Library for MicroPressure sensors

// Constants for unit conversion
const float PSI_TO_MMHG = 51.7149; // Conversion factor: 1 psi = 51.7149 mmHg

// Mux setup
QWIICMUX myMux;
const uint8_t muxAddress = 0x70;  // Default I2C address for Qwiic Mux
const int sensorChannels[3] = {0, 2, 3}; // Mux channels for each pressure sensor
SparkFun_MicroPressure pressureSensor; // Create pressure sensor object

// Flow sensor setup
const int flowPin = 3; // Digital pin connected to YF-S201 flow sensor output
volatile int flowPulseCount = 0; // Counter for flow sensor pulses
float calibrationFactor = 7.5; // Calibration constant: pulses per second per L/min

// Timing for flow rate calculation
unsigned long lastFlowCheck = 0; // Last time flow was checked
const unsigned long flowInterval = 1000; // Flow rate calculation interval (1 second)
float flowRate_mL_per_sec = 0; // Final flow rate in mL/sec

// Stepper motor control pins
const int stepPin = 5; // Pin to send step pulses
const int dirPin = 2;  // Pin to set motor direction
const int enPin = 8;   // Enable pin for motor driver

// Interrupt Service Routine (ISR) for counting flow sensor pulses
void flowISR() {
  flowPulseCount++; // Increment pulse count every time a pulse is detected
}

void setup() {
  Serial.begin(9600); // Start serial communication for debugging
  Wire.begin();       // Initialize I2C bus

  // Initialize the Qwiic Mux
  if (!myMux.begin(muxAddress)) {
    Serial.println("Mux not detected!");
    while (1); // Halt if Mux is not detected
  }

  // Setup the flow sensor pin and attach interrupt
  pinMode(flowPin, INPUT_PULLUP);
  attachInterrupt(digitalPinToInterrupt(flowPin), flowISR, RISING);

  // Setup motor control pins
  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enPin, OUTPUT);
  digitalWrite(enPin, LOW); // Enable motor driver (active LOW)
}

// Function to read pressure sensor on specified mux channel
float readPressureSensor(int channel) {
  myMux.setPort(channel); // Enable the specified channel on the Mux

  // Initialize pressure sensor on that channel
  if (!pressureSensor.begin()) {
    Serial.print("Sensor on channel ");
    Serial.print(channel);
    Serial.println(" not detected.");
    return -1.0; // Return error value if sensor not found
  }

  float pressure_psi = pressureSensor.readPressure(); // Read pressure in psi
  return pressure_psi * PSI_TO_MMHG; // Convert to mmHg and return
}

// Function to rotate motor forward and backward
void moveMotor() {
  // Move motor forward (clockwise)
  digitalWrite(dirPin, HIGH); // Set direction
  for (int x = 0; x < 400; x++) { // Move 800 steps forward
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(1071);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(1071);
  }
}

void loop() {
  // --- Read and display pressure sensor values ---
  for (int i = 0; i < 3; i++) {
    float pressure = readPressureSensor(sensorChannels[i]);
    Serial.print("Pressure Sensor ");
    Serial.print(i);
    Serial.print(": ");
    Serial.print(pressure);
    Serial.println(" mmHg");
  }

  // --- Flow rate calculation ---
  unsigned long currentMillis = millis();
  if (currentMillis - lastFlowCheck >= flowInterval) {
    noInterrupts(); // Temporarily disable interrupts while reading shared variable
    int count = flowPulseCount;
    flowPulseCount = 0; // Reset counter for next interval
    interrupts(); // Re-enable interrupts

    // Convert pulse count to flow rate in mL/sec
    float flowRate_L_per_min = count / calibrationFactor;
    flowRate_mL_per_sec = (flowRate_L_per_min * 1000) / 60.0;

    // Print flow rate to serial monitor
    Serial.print("Flow Rate: ");
    Serial.print(flowRate_mL_per_sec);
    Serial.println(" mL/sec");

    lastFlowCheck = currentMillis; // Update timestamp
  }

  // --- Motor motion ---
  moveMotor(); // Run motor forward and backward
} 
