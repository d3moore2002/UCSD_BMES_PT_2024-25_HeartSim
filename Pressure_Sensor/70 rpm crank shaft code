// Full system code for SparkFun Qwiic RedBoard
// Includes: 3 MicroPressure sensors via Qwiic Mux, YF-S201 flow sensor, and NEMA23 motor via microstep driver
// Units: Pressure in mmHg, Flow in mL/sec

#include <Wire.h>
#include <SparkFun_I2C_Mux_Arduino_Library.h>

// Mux and pressure sensor constants
QWIICMUX mux;
const byte MUX_ADDRESS = 0x70;
const byte PRESSURE_SENSOR_ADDR = 0x28;  // Assuming default I2C address
const int sensorChannels[3] = {0, 1, 2}; // Mux channels for the pressure sensors

// Flow sensor (YF-S201) setup
const byte flowPin = 3;        // Digital pin the flow sensor is attached to
volatile int flowPulseCount = 0;
float calibrationFactor = 7.5; // Depends on the sensor; 7.5 pulses per second per L/min (typical)

// Motor driver setup
const int stepPin = 5;
const int dirPin = 2;
const int enPin = 8;
const unsigned int stepDelayMicros = 2143; // Calculated for 70 RPM (see breakdown below)

// Interrupt service routine for counting flow pulses
void flowISR() {
  flowPulseCount++;
}

// Function to select a channel on the mux
void selectMuxChannel(byte channel) {
  mux.setPort(channel);
  delay(5); // Short delay to allow channel switch to settle
}

// Function to read pressure from the sensor and convert to mmHg
float readPressureSensor(byte channel) {
  selectMuxChannel(channel);

  Wire.beginTransmission(PRESSURE_SENSOR_ADDR);
  Wire.endTransmission();

  Wire.requestFrom(PRESSURE_SENSOR_ADDR, 4);
  if (Wire.available() < 4) return -1;

  byte data[4];
  for (int i = 0; i < 4; i++) {
    data[i] = Wire.read();
  }

  // Convert raw data to pressure (sensor specific formula)
  int rawCounts = ((data[0] & 0x3F) << 8) | data[1];
  float pressurePSI = ((rawCounts - 1638.0) * 25.0) / (13107.0);
  float pressureMMHg = pressurePSI * 51.7149;

  return pressureMMHg;
}

void setup() {
  Serial.begin(9600);
  Wire.begin();
  mux.begin();

  pinMode(flowPin, INPUT);
  attachInterrupt(digitalPinToInterrupt(flowPin), flowISR, RISING);

  pinMode(stepPin, OUTPUT);
  pinMode(dirPin, OUTPUT);
  pinMode(enPin, OUTPUT);
  digitalWrite(enPin, LOW); // Enable motor driver

  Serial.println("System Initialized");
}

unsigned long lastFlowTime = 0;
int lastFlowCount = 0;

void loop() {
  // === Pressure Readings ===
  for (int i = 0; i < 3; i++) {
    float pressure = readPressureSensor(sensorChannels[i]);
    Serial.print("Pressure Sensor ");
    Serial.print(i);
    Serial.print(": ");
    Serial.print(pressure);
    Serial.println(" mmHg");
  }

  // === Flow Measurement ===
  unsigned long currentMillis = millis();
  if (currentMillis - lastFlowTime >= 1000) { // Every second
    detachInterrupt(digitalPinToInterrupt(flowPin));
    float flowRate = (flowPulseCount / calibrationFactor); // L/min
    float flowMLperSec = flowRate * 1000 / 60;             // mL/sec

    Serial.print("Flow Rate: ");
    Serial.print(flowMLperSec);
    Serial.println(" mL/sec");

    flowPulseCount = 0;
    lastFlowTime = currentMillis;
    attachInterrupt(digitalPinToInterrupt(flowPin), flowISR, RISING);
  }

  // === Motor Motion at 70 RPM ===
  digitalWrite(dirPin, HIGH); // Move forward
  for (int x = 0; x < 800; x++) { // 4 revolutions
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(stepDelayMicros);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(stepDelayMicros);
  }

  delay(1000); // Pause for 1 second

  digitalWrite(dirPin, LOW); // Reverse
  for (int x = 0; x < 800; x++) {
    digitalWrite(stepPin, HIGH);
    delayMicroseconds(stepDelayMicros);
    digitalWrite(stepPin, LOW);
    delayMicroseconds(stepDelayMicros);
  }

  delay(1000); // Pause for 1 second
}
